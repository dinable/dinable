import { Observable, Subject } from 'rxjs';
import { Clock, Texture } from 'three';
/**
 * Basic Animator Class
 *
 * allows to animate texture in loop
 *
 * @example
 * const spriteTexture = new THREE.TextureLoader().load('sprite-texture.png')
 * const animator = new PlainAnimator(spriteTexture, 4, 4, 10, 15);
 * const texture = animator.init();
 * animator.animate();
 *
 * @see {@link https://github.com/MaciejWWojcik/three-plain-animator/tree/master/src/examples/simple-2d-animation/src/index.ts)}
 */
export declare class PlainAnimator {
    texture: Texture;
    protected tilesAmountHorizontally: number;
    protected tilesAmountVertically: number;
    protected tilesTotalAmount: number;
    protected currentFrameDisplayTime: number;
    protected currentFrame: number;
    protected clock: Clock;
    protected end$: Subject<void>;
    protected readonly frameDisplayDuration: number;
    /**
     * Create a PlainAnimator
     * @param {Texture} texture - THREE Texture object with sprite image loaded
     * @param {number} tilesAmountHorizontally - number of columns in your sprite image
     * @param {number} tilesAmountVertically - number of rows in your sprite image
     * @param {number} tilesTotalAmount - number of frames in your sprite image
     * @param {number} framesPerSecond - number of frames per second, for example 15
     */
    constructor(texture: Texture, tilesAmountHorizontally: number, tilesAmountVertically: number, tilesTotalAmount: number, framesPerSecond: number);
    /**
     * Initializes Animator,
     * @param {number} startFrame - optional parameter for setting the start position of animation (frame number)
     * @return {Texture} a Texture object that will display animation
     */
    init(startFrame?: number): Texture;
    /**
     * Updates current frame in Texture, should be invoked in loop to allow updating the texture
     *
     * @example
     * function animate() {
     *    animator.animate();
     *    requestAnimationFrame(animate);
     *  }
     *
     */
    animate(): void;
    /**
     * Getter for Observable that emits event on end of the animation
     * note that when used in infinity loop, the event will be emitted every time animation completes
     * @return {Observable} a void Observable
     */
    get end(): Observable<void>;
    protected updateFrame(): void;
}
